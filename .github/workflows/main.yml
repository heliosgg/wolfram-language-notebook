# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on: [push, pull_request]

env:
  WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAM_LICENSE_ENTITLEMENT_ID }}

jobs:
  engine-ubuntu:
    if: false
    runs-on: ubuntu-latest
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      WOLFRAM_SYSTEM_ID: Linux-x86-64
    steps:
      - uses: actions/checkout@v2
      - name: Run wolframscript
        run: wolframscript -code 123+456

  engine-windows:
    runs-on: windows-latest
    env:
      WOLFRAM_SYSTEM_ID: Windows-x86-64
      WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL: https://files.wolframcdn.com/packages/winget/12.2.0.0/WolframEngine_12.2.0_WIN.msi
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
      WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY: WolframEngine
    steps:
      - uses: actions/checkout@v2
      - name: Cache/restore Wolfram Engine install
        id: cache-restore
        uses: actions/cache@v2
        env:
          WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
        with:
          path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
          key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
      - name: Download and install Wolfram Engine
        env:
          WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
          WOLFRAMENGINE_INSTALL_MSI_PATH: '${{ runner.temp }}\WolframEngine-Install.msi'
          WOLFRAMENGINE_INSTALL_LOG_PATH: '${{ runner.temp }}\WolframEngine-Install.log'
        run: |
          echo 'Downloading Wolfram Engine installer...'
          $msiFile = '${{ env.WOLFRAMENGINE_INSTALL_MSI_PATH }}'
          $logFile = '${{ env.WOLFRAMENGINE_INSTALL_LOG_PATH }}'
          Import-Module BitsTransfer
          Start-BitsTransfer '${{ env.WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL }}' $msiFile
          echo 'Downloaded Wolfram Engine installer.'
          $DataStamp = get-date -Format yyyyMMddTHHmmss
          $MSIArguments = @(
              "/i"
              ('"{0}"' -f $msiFile)
              'INSTALLLOCATION="${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}"'
              "/qn"
              "/norestart"
              "/L*v"
              $logFile
          )
          echo 'Installing Wolfram Engine...'
          Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
          echo 'Installed Wolfram Engine.'
      - name: Run wolframscript
        env:
          WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
          WOLFRAMINIT: "-pwfile !cloudlm.wolfram.com -entitlement ${{ secrets.WOLFRAM_LICENSE_ENTITLEMENT_ID }}"
        run: |
          $env:Path += ';${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}\'
          wolfram -script aaa.wls

  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [engine-ubuntu, engine-windows]
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ^16
    - run: npm ci
    - name: Build extension
      run: |
        npm run syntaxes
        npm run compile
    - name: Run Wolfram Engine tests
      run: |
        wolframscript -code 2+2
    - name: Run extension tests
      uses: GabrielBB/xvfb-action@v1.0
      with:
        run: npm test
